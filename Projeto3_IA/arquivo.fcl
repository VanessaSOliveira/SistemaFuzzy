/*
	Arquivo FCL do projeto 3 da disciplina Inteligencia Artificial
*/

FUNCTION_BLOCK cannon	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	dx : REAL;
	dy : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	Velocidade : REAL;
	Angulo : REAL;
END_VAR

FUZZIFY dx		// Fuzzify input variable 'dx': {'muitoPerto', 'perto', 'longe' , 'muitoLonge'}
	TERM muitoPertoAntes := (-5, 0) (-3, 1) (0, 1); 
	TERM pertoAntes := (-10, 0) (-6.5, 1) (-3, 0);
	TERM longeAntes := (-30, 0) (-19, 1) (-8,0);
	TERM muitoLongeAntes := (-50, 1) (-40, 1) (-25, 0);

	TERM muitoPertoDepois := (0, 1) (3, 1) (5,0) ; 
	TERM pertoDepois := (3, 0) (6.5, 1) (10,0);
	TERM longeDepois := (8, 0) (19, 1) (30,0);
	TERM muitoLongeDepois := (25, 0) (40, 1) (50, 1);
END_FUZZIFY

FUZZIFY dy			// Fuzzify input variable 'dy': { 'muitoBaixo', 'baixo', 'alto', 'muitoAlto' }
	TERM muitoLongeAbaixo := (-22, 1) (-10, 1) (-8,0); 
	TERM longeAbaixo := (-10, 0) (-6.5, 1) (-3, 0);
	TERM pertoAbaixo := (-3.5, 0) (-2.5, 1) (-1.5, 0);
	TERM muitoPertoAbaixo := (-2, 0) (-1, 1) (0, 1);

	TERM muitoPertoAcima := (0, 1) (1, 1) (2,0) ; 
	TERM pertoAcima := (1.5, 0) (2.5, 1) (3.5, 0);
	TERM longeAcima := (3, 0) (6.5, 1) (10, 0);
	TERM muitoLongeAcima := (8, 0) (10, 1) (22, 1);
END_FUZZIFY

DEFUZZIFY Velocidade			// Defuzzify output variable 'velocidade' : {'lenta', 'normal', 'rapida' }
	TERM diminuiMuitoMuito := (-10,1) (-8,1) (-7,0);
	TERM diminuiMuito := (-8,0) (-6, 1) (-4, 0);
	TERM diminuiPouco := (-5, 0) (-3.5, 1) (-2, 0);
	TERM diminuiMuitoPouco := (-3, 0) (-2, 1) (0, 1);

	TERM aumentaMuitoPouco := (0, 1) (2, 1) (3, 0);
	TERM aumentaPouco := (2,0) (3.5, 1) (5, 0);
	TERM aumentaMuito := (4, 0) (6, 1) (8, 0);
	TERM aumentaMuitoMuito := (7, 0) (8, 1) (10, 1);
	
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY Angulo			// Defuzzify output variable 'angulo' : {'fechado', 'medio', 'aberto' }
	TERM fechaMuitoMuito := (-20,1) (-10,1) (-9,0);
	TERM fechaMuito := (-10,0) (-7.5,1) (-5,0);
	TERM fechaPouco := (-6,0) (-3.5,1) (-1,0);
	TERM fechaMuitoPouco := (-2,0) (-1,1) (0,1);

	TERM abreMuitoPouco := (0,1) (1,1) (2,0);
	TERM abrePouco := (1,0) (3.5,1) (6,1);
	TERM abreMuito := (5,0) (7.5,1) (10,0);
	TERM abreMuitoMuito := (9,0) (10,1) (20,1);
	
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF dx IS muitoLongeDepois THEN Velocidade IS diminuiMuitoMuito;
	RULE 2 : IF dx IS longeDepois THEN Velocidade IS diminuiMuito; 
	RULE 3 : IF dx IS pertoDepois THEN Velocidade IS diminuiPouco;
	RULE 4 : IF dx IS muitoPertoDepois THEN Velocidade IS diminuiMuitoPouco;

	RULE 5 : IF dx IS muitoPertoAntes THEN Velocidade IS aumentaMuitoPouco;
	RULE 6 : IF dx IS pertoAntes THEN Velocidade IS aumentaPouco;
	RULE 7 : IF dx IS longeAntes THEN Velocidade IS aumentaMuito; 
	RULE 8 : IF dx IS muitoLongeAntes THEN Velocidade IS aumentaMuitoMuito;

	RULE 9 : IF dy IS muitoLongeAcima THEN Angulo IS fechaMuitoMuito;
	RULE 10 : IF dy IS longeAcima THEN Angulo IS fechaMuito; 
	RULE 11 : IF dy IS pertoAcima THEN Angulo IS fechaPouco;
	RULE 12 : IF dy IS muitoPertoAcima THEN Angulo IS fechaMuitoPouco;

	RULE 13 : IF dy IS muitoPertoAbaixo THEN Angulo IS abreMuitoPouco;
	RULE 14 : IF dy IS pertoAbaixo THEN Angulo IS abrePouco;
	RULE 15 : IF dy IS longeAbaixo THEN Angulo IS abreMuito; 
	RULE 16 : IF dy IS muitoLongeAbaixo THEN Angulo IS abreMuitoMuito;
	
	
END_RULEBLOCK

END_FUNCTION_BLOCK
